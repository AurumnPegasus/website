[{"content":"Markdownify box This is boxmd shortcode Simple box This is **box** shortcode  Code tabs Make it easy to switch between different code\njava javascript  1  System.out.println(\u0026#39;Hello World!\u0026#39;);     1  console.log(\u0026#39;Hello World!\u0026#39;);       'use strict'; var containerId = JSON.parse(\"\\\"d96f892eb0443615\\\"\"); var containerElem = document.getElementById(containerId); var codetabLinks = null; var codetabContents = null; var ids = []; if (containerElem) { codetabLinks = containerElem.querySelectorAll('.codetab__link'); codetabContents = containerElem.querySelectorAll('.codetab__content'); } for (var i = 0; i 0) { codetabContents[0].style.display = 'block'; }  Tabs for general purpose Windows MacOS Ubuntu  Windows section 1  console.log(\u0026#39;Hello World!\u0026#39;);   ‚ö†Ô∏èBecareful that the content in the tab should be different from each other. The tab makes unique id hashes depending on the tab contents. So, If you just copy-paste the tabs with multiple times, since it has the same contents, the tab will not work.\n MacOS section Hello world!  Ubuntu section Great!    'use strict'; var containerId = JSON.parse(\"\\\"0fa06ef53ae6dc58\\\"\"); var containerElem = document.getElementById(containerId); var tabLinks = null; var tabContents = null; var ids = []; if (containerElem) { tabLinks = containerElem.querySelectorAll('.tab__link'); tabContents = containerElem.querySelectorAll('.tab__content'); } for (var i = 0; i 0) { tabContents[0].style.display = 'block'; }  Expand   Expand me  Title contents     Expand me2  Title2 contents2   Alert Colored box\nthis is a text this is a text this is a text this is a text Notice success text  info text  warning text  error text  ","description":"tabs, code-tabs, expand, alert, warning, notice, img, box","id":1,"section":"posts","tags":["shortcode"],"title":"Shortcodes","uri":"https://aurumnpegasus.github.io/website/posts/shortcodes/"},{"content":"This blog contains explanation of the paper by Victor Allis called \u0026lsquo;A Knowledge-based Approach of Connect-Four\u0026rsquo;\nüìú Introduction Connect-Four is a game for two players. Both have 21 identical coins. In the standard form of the game, one set of coins is yellow, and the other is red. You play the game on a vertical, rectangular board consisting of 7 vertical columns of 6 rows each. Each time a player puts a coin down, it falls to the lowest unoccupied block in that column. Players make a move in turns.\nIf a player connects four coins either horizontally, vertically or diagonally, they win. Occupying each of the 7x6 blocks such that no other move is possible, and ensuring that there is no winning player, entails the draw condition.\nNow, some definitions to make referencing the board easier. The 7 columns are labelled \u0026lsquo;a\u0026rsquo; through \u0026lsquo;g\u0026rsquo;, while the rows are numbered 1 through 6. In this way, the lowest square in the middle column is called d1. For convenience\u0026rsquo;s sake, we are taking the first player as White (W) and second as Black (B) (similar to Chess).\nüõ£Ô∏è Approaching the Game Before you show off your excellent techniques, we need to first prove that the dumb approach does not work. It is easy to see that the number of possible positions is at most $3^{42} (\\geq 10^{20}).$ This upper bound is a very crude one and can be brought into better proportions. For this purpose, a program was written in the C programming language, which is mentioned later. For the standard, 7 x 6 board, the program saw an upper bound of $7.1* 10^{13}$.\nSo, too many possibilities, significantly less accuracy, brute force is not an efficient approach. A player cannot win just by instantiating each possible board and trying to follow it. You are a human after all, not a computer üòõ\n‚öÑ Some Possible Boards Let\u0026rsquo;s start small. Consider a board of n columns, but only 2 rows. My claim is that Black will never lose a game on this board. Even if n were to be practical infinity.\nThis is how B should play:\n Pair up all the n rows in groups of 2. If n is odd let the nth row be alone. If W plays in row 1, play in row 2 (pair). If W plays in row 2, play in row 1. If W plays in row N, play in row N.  This will always result in a draw, since only way W could win is if it were to get its coin in 4 consecutive rows side by side. This is prevented by B.\nAnother solved board is with 2n rows (even) and columns ‚â§ 6. This strategy could also be used for ensuring B always draws.\n If W plays in columns 1, 2, 5 or 6, B plays in the same column. If W plays for the first time in column 3 or 4, B plays in the other column. Otherwise, if W plays in column 3 or 4, and B can still play in it, B plays in the same column If W plays in column 3 or 4, and B can not play in it, B plays in the other column.  Since B never allows a vertical 4 for W, that is out of the question. For horizontal 4 at row 1, B ends up occupying at least 1 of the two bottom columns, hence denying that for W as well. For any other horizontal 4, it is only possible in odd rows for W. But in column 3 and 4, B ends up having at least 1 in either of the two in all odd rows. Diagonal is not possible at all since W will have all coins at odd rows in column 1, 2, 5 and 6.\n‚ò†Ô∏è Threats Useless Threats  The threats by W in row 3,4,5 are considered to be useless, due to the threat by B in row 2. Since W cannot move in column 2 and 6, it has to fill column 7. Even number of rows mean that W will still have the turn when column 7 is filled, meaning B will end up winning.\nWhether a threat is useless or useful is dependant on control of Zugzwang (explained later).\nOdd Even Threat A threat is only useful if a player is forced to play in a row just below that of the threat. Usually that happens when other columns are filled. In such cases, generally, W has only odd rows, and B has even rows.\nBlack has odd threats, and White has even. If they are in the same column, the lower threat will win (as seen above)\nGenerally speaking, W threat is stronger than that of B. Here is how everything rolls out:\n W has odd, B has even threat: W will win. W has even, B has even threat: B will win. W has even, B has odd threat: Draw. W has odd, B has odd threat: Draw.\nA simple example consisting of multiple threats is:   Here, B has odd threat at c3 and W has odd threat at f3. Going by the table, it should be a draw. Lets play it out. W has to give up its own threat to play the game, which would ideally result in a draw, since B will have to give up its threat in c. But what happens is that B gets to create a new threat at c2 due to coin at f5. This gives B consecutive threats, and thus it wins.\nThis tells us that though parity of threats tells us a good amount about the winner, we need to be careful about new threats.\n‚ùÇ Zugzwang This is a very basic but powerful concept in Connect 4. Zugzwang basically means to force a player to make a move they would rather not make. This is due to the simple rule that they have to make a move, and the constraints of the board.\nInitial Position W always moves first. Therefore B always is in a position to play follow up, hence to control the Zugzwang. Suppose B plays follow up from the beginning, you would end up with a board like this:\n Though this is an illegal position, it is interesting to note who won first. Since W controls whole first row, naturally W won the game first. This shows that follow up is not a good strategy at the start of the game for B.\nOther Positions The following board represents a position where W is in control of the Zugzwang:\n Here, W has an odd threat in column a. Knowing this, B won\u0026rsquo;t play there. Since on the rest of the board, odd number of squares are remaining, whoever plays first here, the opposite will have to play in column a. Since W is playing the first, it can control the zugzwang to force B to play at a2. The only option B has to go against the zugzwang and connect its 4 men, but still, it is W\u0026rsquo;s game to lose.\nIn this case, B has control of Zugzwang due to even threats\n B and W ideally do not want to be the first to play in b or f. Other than these 2, the total number of boxes remaining is even. This means whoever plays first here, will be the player *forced to play first in either column b or f. That means at the end, W will have to play in b1 or f1, thus losing. B is in complete control of Zugzwang here and can play follow up\n üìù References  Resources by Victor Allis Alpha Beta Pruning based heuristics Principles and Tehniques BY Stanford C4 Numbers by oeis org Math oriented resources behind Connect-4 ","description":"Exploring the paper by Victor Allis on how to view the game.","id":2,"section":"posts","tags":["game","paper","connect4"],"title":"Connect Four, Part-1","uri":"https://aurumnpegasus.github.io/website/posts/connect_four_1/"},{"content":"This blog contains explanation of the paper by Victor Allis called \u0026lsquo;A Knowledge-based Approach of Connect-Four\u0026rsquo;\nThis is a 2 part series exploring the paper, and I would suggest going through \u0026lsquo;first part\u0026rsquo; if you haven\u0026rsquo;t already.\nüïµÔ∏è‚Äç‚ôÇÔ∏è Strategies A formal definition is given of the nine rules which are used to refute potential threats of the opponent. These can be only applied by the player in control of the Zugzwang. These are always applied in the places opponent has to move.\nClaimeven This makes direct use of the fact that player in control of Zugzwang can get all even unclaimed positions, giving odd positions to the other.\n B is in control of Zugzwang here since W doesn\u0026rsquo;t have any threat. Here, if B were to use claimeven, he could end up getting a draw, since any threat of W will need to have a coin in even row, which will not be possible.\nBaseinverse This is based on the logic that a player cannot play two directly playable moves in one turn. Therefore once the opponent has made the move, controller of Zugzwang can still cover the other position.\n Here, if W cannot play in a1 and b1 at the same time. That means if W plays in a1, B plays in b1, and vice versa. Thus the threat is nullified.\nVerticle Similar to Baseinverse, this is based on the fact that a player cannot play two directly playable moves in a single column in one turn. Depending on the opponent, the player controlling the Zugzwang can either play second or first in the column to prevent a verticle 4.\nAftereven Aftereven uses a special side-effect of the usage of one or more Claimevens. If a group can be completed by the controller of zugzwang, then they can complete the whole board using claim even, and then complete that group:\n Here, B can use aftereven to complete the group at either b2 or f2. Here, then B can use claimeven to finally force W to play in either b1 or f1. This is called as aftereven, where you can form a group and win by using claimevens.\nLowinverse Lowinverse is based on the fact that two odd numbers when summed give an even number. Normally, controller of Zugzwang will play lowest even square of the column containing odd number of empty squares. But when we have two columns (doesn\u0026rsquo;t have to be consecutive) having odd number of empty squares, this will force the opponent to play first. In such a way controller of zugzwang gets to take the odd square above the opponent.\nHighinverse This is based on the same principle as that of lowinverse:\n In lowinverse, we would consider c2, c3, d2, d3 as important. Here we consider c4 and d4 as important too. Highinverse is nothing but a combination of lowinverse and claimeven. What this does is say W plays in c2, then using lowinverse B can get c3. Then B (controller of Zugzwang) convert d3 and d4 into a claimeven, to get d4. In such a way B ends up getting c3 and d4.\nBaseclaim This is a combination of Baseinverse and Claimeven:\n Here, W can possibly have 3 threats formed: b1-e1, c1-f1, b1-e4(diagonal). B needs to play in a way to counter this.\n W plays in b1, B plays in e1 and then uses Claimeven at c1-c2 to prevent b1-e4. W plays in c1, B plays in e1 and then uses Claimeven at b1-c2 to prevent b1-e4. W plays in e1, B plays in c1 and then uses Claimeven at b1-c2 to prevent b1-e4.  In such ways B can nullify all of W\u0026rsquo;s threats.\nBefore This is a combination of Claimeven and Vertical:\n Here b4-e1 is the Before group. Since b4 and e1 are still empty, this means it works for all groups needing both b5 and e2 (b5-e2). Here, before uses the squares b4-b5 and e1-e2. As soon as b4 is played, b5 is played, and same with e1-e2. This will ensure B completing b4-e1 or preventing W\u0026rsquo;s b5-e2. In both cases b5-e2 is a useless threat.\nIt basically means that if there is a before group, the opponent cannot claim all the unclaimed squares in the threat column.\nSpecial Before  We use d2-g2 as the before group. This can contain claim evens at f1-f2 and g1-g2 and vertical at e2-e3. We need to use baseinverse to solve a1-d1, which would give W a possibility of b1-e4. To combat this, we can use claimeven to get e4. This claimeven, however, is conflicting with vertical at e2-e3.\nThe only reason B needs to play e3 is to prevent d3-g3. So B can play d3 as well. If W were to play at d3 before, then B should immediately get e2 to continue with the Before play. Therefore to play a Special Before, we need a before group (d2-g2) with one of the empty squares as directly playable (e2). Furthermore, we need another playable square (d3).\nCombination  ‚ö´‚ö™ Black and White Black We have developed a set of rules which can be used to show that certain potential threats can be refuted. Since some of the rules depend on Zugzwang, it is important that the person who applies them is in control of the Zugzwang.\nB is in control of Zugzwang until W creates an odd threat. Till then if B just plays using the strategy. If W were to create a good threat (odd threat), B is no more in control of Zugzwang. Here we observe that no matter what B does from here on out, there generally will not be any set of rules which can refute that threat.\nFrom this we can conclude that we do not need to check who controls the Zugzwang for B before applying the rules. For if B is in control, we can apply the rules, if not, it doesn\u0026rsquo;t matter what B does.\nWhite W needs an odd threat to gain control of Zugzwang. Once it has that, he just needs to follow the strategic rules to fill up the rest of the board. If W has more than one odd threat, it can choose from which poison to kill B from.\nVictor A position in which W has to move, can be evaluated as B as controller of Zugzwang, and vice versa. For W as a controller of Zugzwang, evaluation must be done removing the odd column out of viable options. The evaluation begins with finding all possible instances of the 9 strategic rules.\nFor each position where any rule is applied, it is seen whether it can solve a problem or not. Each application of one of the rules which solve one or more problems is stored. These are called Solutions. This results in a list of solutions, where each solution is stored as a Struct. Struct consists of fields describing the rule, and the positions involved. Furthermore for each solution we have a list of groups solved by that solution.\nWe also create a map with problem as the key and list of pointer(s) to the solution as the values. After all this, we need to see which solutions can work together and which cannot. To work this out, solutions are seen as nodes of an undirected graph. If two solutions can\u0026rsquo;t be used simultaneously, they are connected. These connections are stored in an adjacency matrix. To fill it, it is important to know type of solutions and squares involved. Once it is filled, it is a normal square array.\nIf we see the problems as nodes, too, and we connect a solution and a problem if the solution solves the problem, and no problems are connected, we can solve it as a pure graph problem.\nGiven are two sets of nodes, S(olutions) and P(roblems). We try to find an allowable (in graph theory: independent) subset C(hosen) of S, with the property that P is contained in B(C) (the set of all neighbours of nodes in C)\nIt can be solved using a simple backtracking algorithm.:\ncpp  1 2 3 4 5 6 7 8 9 10 11 12 13  void FindChosenSet(P, S) { if (P == EmptySet) { Eureka(); // We have found a subset C  } else { MostDifficultNode = NodeWithLeastNumberOfNeighbours(P); for (auto neighbours: MostDifficultNode) { FindChosenSet( P - { MostDifficultNode }, S - AllNeighboursOf(ChosenNeighbour) ); } } }       'use strict'; var containerId = JSON.parse(\"\\\"8f18fe439141ec5d\\\"\"); var containerElem = document.getElementById(containerId); var codetabLinks = null; var codetabContents = null; var ids = []; if (containerElem) { codetabLinks = containerElem.querySelectorAll('.codetab__link'); codetabContents = containerElem.querySelectorAll('.codetab__content'); } for (var i = 0; i 0) { codetabContents[0].style.display = 'block'; }  If a set of solutions is found for a given position, these solutions show the plan which has to be followed to play the game until the desired result (win for White, or at least a draw for Black) is reached.\nüß† Food for Thought Lets assume we have an oracle. This oracle cannot predict who will win, but for any given state of board, give the best possible outcome. Let us assume that we play such that for each state of board, we ask for help from the oracle. Therefore it is a \u0026lsquo;perfect\u0026rsquo; game. In such case, if W wins, does that mean W will always win if it were a perfect game?\nThe thing is, if for B we were to choose that draw is fine, it will not change any result. Since oracle predicts the best move, if the second scenario gives different result, that would mean Oracle could have chosen the best move, but did not. That is contradictory. That means that whoever will win with the help of the Oracle, is always at an advantage.\nAnother thought to explore is number of legal ways to arrange $N$ coins in board. For now, we take the board to be the standard $7 \\times 6$ board.\n üìù References  Resources by Victor Allis Alpha Beta Pruning based heuristics Principles and Tehniques BY Stanford C4 Numbers by oeis org Math oriented resources behind Connect-4 ","description":"Exploring the paper by Victor Allis describing strategies in the game.","id":3,"section":"posts","tags":["game","paper","connect4"],"title":"Connect Four, Part-2","uri":"https://aurumnpegasus.github.io/website/posts/connect_four_2/"},{"content":"Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\nYouTube Privacy Enhanced Shortcode   Twitter Simple Shortcode .twitter-tweet { font: 14px/1.45 -apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif; border-left: 4px solid #2b7bb9; padding-left: 1.5em; color: #555; } .twitter-tweet a { color: #2b7bb9; text-decoration: none; } blockquote.twitter-tweet a:hover, blockquote.twitter-tweet a:focus { text-decoration: underline; }  ‚ÄúIn addition to being more logical, asymmetry has the advantage that its complete appearance is far more optically effective than symmetry.‚Äù\n‚Äî Jan Tschichold pic.twitter.com/gcv7SrhvJb\n\u0026mdash; Graphic Design History (@DesignReviewed) January 17, 2019 Vimeo Simple Shortcode  .__h_video { position: relative; padding-bottom: 56.23%; height: 0; overflow: hidden; width: 100%; background: #000; } .__h_video img { width: 100%; height: auto; color: #000; } .__h_video .play { height: 72px; width: 72px; left: 50%; top: 50%; margin-left: -36px; margin-top: -36px; position: absolute; cursor: pointer; }  ","description":"A brief description of Hugo Shortcodes","id":4,"section":"posts","tags":["shortcodes","privacy"],"title":"Rich Content","uri":"https://aurumnpegasus.github.io/website/posts/rich-content/"},{"content":"Code Syntax Highlighting Verify the following code blocks render as code blocks and highlight properly.\nMore about tuning syntax highlighting is the Hugo documentation.\nDiff 1 2 3 4 5 6 7 8 9 10  *** /path/to/original\t\u0026#39;\u0026#39;timestamp\u0026#39;\u0026#39; --- /path/to/new\t\u0026#39;\u0026#39;timestamp\u0026#39;\u0026#39; *************** *** 1 **** ! This is a line. --- 1 --- ! This is a replacement line. It is important to spell -removed line +new line   *** /path/to/original\t\u0026#39;\u0026#39;timestamp\u0026#39;\u0026#39; --- /path/to/new\t\u0026#39;\u0026#39;timestamp\u0026#39;\u0026#39; *************** *** 1 **** ! This is a line. --- 1 --- ! This is a replacement line. It is important to spell -removed line +new line Makefile CC=gcc CFLAGS=-I. hellomake: hellomake.o hellofunc.o $(CC) -o hellomake hellomake.o hellofunc.o -I. 1 2 3 4 5  CC=gcc CFLAGS=-I. hellomake: hellomake.o hellofunc.o $(CC) -o hellomake hellomake.o hellofunc.o -I.   JSON 1 2 3  {\u0026#34;employees\u0026#34;:[ {\u0026#34;firstName\u0026#34;:\u0026#34;John\u0026#34;, \u0026#34;lastName\u0026#34;:\u0026#34;Doe\u0026#34;}, ]}   Markdown 1 2 3  **bold** *italics* [link](www.example.com)   JavaScript 1  document.write(\u0026#39;Hello, world!\u0026#39;);   CSS 1 2 3  body { background-color: red; }   Objective C 1 2 3 4 5 6  #import \u0026lt;stdio.h\u0026gt;  int main (void) { printf (\u0026#34;Hello world!\\n\u0026#34;); }   Python 1  print \u0026#34;Hello, world!\u0026#34;   XML 1 2 3 4 5  \u0026lt;employees\u0026gt; \u0026lt;employee\u0026gt; \u0026lt;firstName\u0026gt;John\u0026lt;/firstName\u0026gt; \u0026lt;lastName\u0026gt;Doe\u0026lt;/lastName\u0026gt; \u0026lt;/employee\u0026gt; \u0026lt;/employees\u0026gt;   Perl 1  print \u0026#34;Hello, World!\\n\u0026#34;;   Bash 1  echo \u0026#34;Hello World\u0026#34;   PHP 1  \u0026lt;?php echo \u0026#39;\u0026lt;p\u0026gt;Hello World\u0026lt;/p\u0026gt;\u0026#39;; ?\u0026gt;  CoffeeScript 1  console.log(‚ÄúHello world!‚Äù);   C# 1 2 3 4 5 6 7 8  using System; class Program { public static void Main(string[] args) { Console.WriteLine(\u0026#34;Hello, world!\u0026#34;); } }   C++ 1 2 3 4 5 6 7  #include \u0026lt;iostream.h\u0026gt; main() { cout \u0026lt;\u0026lt; \u0026#34;Hello World!\u0026#34;; return 0; }   SQL 1 2  SELECTcolumn_name,column_nameFROMtable_name;  Go 1 2 3 4 5  package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, ‰∏ñÁïå\u0026#34;) }   Ruby 1  puts \u0026#34;Hello, world!\u0026#34;   Java 1 2 3 4 5 6 7 8 9 10 11 12  import javax.swing.JFrame; //Importing class JFrame import javax.swing.JLabel; //Importing class JLabel public class HelloWorld { public static void main(String[] args) { JFrame frame = new JFrame(); //Creating frame  frame.setTitle(\u0026#34;Hi!\u0026#34;); //Setting title frame  frame.add(new JLabel(\u0026#34;Hello, world!\u0026#34;));//Adding text to frame  frame.pack(); //Setting size to smallest  frame.setLocationRelativeTo(null); //Centering frame  frame.setVisible(true); //Showing frame  } }   Latex Equation 1  \\frac{d}{dx}\\left( \\int_{0}^{x} f(u)\\,du\\right)=f(x).   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  import {x, y} as p from \u0026#39;point\u0026#39;; const ANSWER = 42; class Car extends Vehicle { constructor(speed, cost) { super(speed); var c = Symbol(\u0026#39;cost\u0026#39;); this[c] = cost; this.intro = `This is a car runs at ${speed}.`; } } for (let num of [1, 2, 3]) { console.log(num + 0b111110111); } function $initHighlight(block, flags) { try { if (block.className.search(/\\bno\\-highlight\\b/) != -1) return processBlock(block.function, true, 0x0F) + \u0026#39; class=\u0026#34;\u0026#34;\u0026#39;; } catch (e) { /* handle exception */ var e4x = \u0026lt;div\u0026gt;Example \u0026lt;p\u0026gt;1234\u0026lt;/p\u0026gt;\u0026lt;/div\u0026gt;; } for (var i = 0 / 2; i \u0026lt; classes.length; i++) { // \u0026#34;0 / 2\u0026#34; should not be parsed as regexp  if (checkCondition(classes[i]) === undefined) return /\\d+[\\s/]/g; } console.log(Array.every(classes, Boolean)); } export $initHighlight;   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Hello world\u0026lt;/title\u0026gt; \u0026lt;link href=\u0026#39;http://fonts.googleapis.com/css?family=Roboto:400,400italic,700,700italic\u0026#39; rel=\u0026#39;stylesheet\u0026#39; type=\u0026#39;text/css\u0026#39;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;index.css\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;//cdnjs.cloudflare.com/ajax/libs/less.js/2.5.1/less.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;vendor/prism.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;examples.bundle.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41  /********************************************************* * General */ pre[class*=\u0026#34;language-\u0026#34;], code { color: #5c6e74; font-size: 13px; text-shadow: none; font-family: Consolas, Monaco, \u0026#39;Andale Mono\u0026#39;, \u0026#39;Ubuntu Mono\u0026#39;, monospace; direction: ltr; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; line-height: 1.5; tab-size: 4; hyphens: none; } pre[class*=\u0026#34;language-\u0026#34;]::selection, code::selection { text-shadow: none; background: #b3d4fc; } @media print { pre[class*=\u0026#34;language-\u0026#34;], code { text-shadow: none; } } pre[class*=\u0026#34;language-\u0026#34;] { padding: 1em; margin: .5em 0; overflow: auto; background: #f8f5ec; } :not(pre) \u0026gt; code { padding: .1em .3em; border-radius: .3em; color: #db4c69; background: #f9f2f4; }   ","description":"Syntax highlighting test","id":5,"section":"posts","tags":["hugo"],"title":"Syntax highlighting","uri":"https://aurumnpegasus.github.io/website/posts/syntax-highlight/"},{"content":"digraph G { subgraph cluster_0 { style=filled; color=lightgrey; node [style=filled,color=white]; a0 -\u0026gt; a1 -\u0026gt; a2 -\u0026gt; a3; label = \u0026quot;process #1\u0026quot;; } subgraph cluster_1 { node [style=filled]; b0 -\u0026gt; b1 -\u0026gt; b2 -\u0026gt; b3; label = \u0026quot;process #2\u0026quot;; color=blue } start -\u0026gt; a0; start -\u0026gt; b0; a1 -\u0026gt; b3; b2 -\u0026gt; a3; a3 -\u0026gt; a0; a3 -\u0026gt; end; b3 -\u0026gt; end; start [shape=Mdiamond]; end [shape=Msquare]; } ","description":"A hack to put Graphviz on the web.","id":6,"section":"posts","tags":[""],"title":"Viz support","uri":"https://aurumnpegasus.github.io/website/posts/test-viz/"},{"content":"{ \u0026quot;signal\u0026quot;: [ {\u0026quot;name\u0026quot;: \u0026quot;CLK\u0026quot;, \u0026quot;wave\u0026quot;: \u0026quot;p.....|...\u0026quot;}, {\u0026quot;name\u0026quot;:\u0026quot;DAT\u0026quot;, \u0026quot;wave\u0026quot;:\u0026quot;x.345x|=.x\u0026quot;, \u0026quot;data\u0026quot;:[\u0026quot;A\u0026quot;,\u0026quot;B\u0026quot;,\u0026quot;C\u0026quot;,\u0026quot;D\u0026quot;]}, {\u0026quot;name\u0026quot;: \u0026quot;REQ\u0026quot;, \u0026quot;wave\u0026quot;: \u0026quot;0.1..0|1.0\u0026quot;}, {}, {\u0026quot;name\u0026quot;: \u0026quot;ACK\u0026quot;, \u0026quot;wave\u0026quot;: \u0026quot;1.....|01.\u0026quot;} ]} ","description":"WaveDrom is a Free and Open Source online digital timing diagram (waveform) rendering engine that uses javascript, HTML5 and SVG to convert a WaveJSON input text description into SVG vector graphics.","id":7,"section":"posts","tags":[""],"title":"Wavedrom support","uri":"https://aurumnpegasus.github.io/website/posts/test-wavedrom/"},{"content":"{ \u0026quot;type\u0026quot;: \u0026quot;bar\u0026quot;, \u0026quot;data\u0026quot;: { \u0026quot;labels\u0026quot;: [\u0026quot;One\u0026quot;, \u0026quot;Two\u0026quot;, \u0026quot;Three\u0026quot;, \u0026quot;Four\u0026quot;, \u0026quot;Five\u0026quot;, \u0026quot;Six\u0026quot;], \u0026quot;datasets\u0026quot;: [{ \u0026quot;label\u0026quot;: \u0026quot;# of Votes\u0026quot;, \u0026quot;data\u0026quot;: [12, 19, 3, 5, 3, 8] }] } } { \u0026quot;type\u0026quot;: \u0026quot;line\u0026quot;, \u0026quot;data\u0026quot;: { \u0026quot;labels\u0026quot;: [\u0026quot;One\u0026quot;, \u0026quot;Two\u0026quot;, \u0026quot;Three\u0026quot;, \u0026quot;Four\u0026quot;, \u0026quot;Five\u0026quot;, \u0026quot;Six\u0026quot;], \u0026quot;datasets\u0026quot;: [ { \u0026quot;label\u0026quot;: \u0026quot;# of Votes\u0026quot;, \u0026quot;data\u0026quot;: [12, 19, 3, 5, 2, 3], \u0026quot;backgroundColor\u0026quot;:\u0026quot;transparent\u0026quot;, \u0026quot;borderColor\u0026quot;:\u0026quot;orange\u0026quot; }, { \u0026quot;label\u0026quot;: \u0026quot;Some other set\u0026quot;, \u0026quot;data\u0026quot;: [15, 8, 13, 5, 5, 9], \u0026quot;backgroundColor\u0026quot;:\u0026quot;transparent\u0026quot;, \u0026quot;borderColor\u0026quot;:\u0026quot;#44ccff\u0026quot; } ] } } ","description":"Simple yet flexible JavaScript charting for designers \u0026 developers","id":8,"section":"posts","tags":[""],"title":"Chart support","uri":"https://aurumnpegasus.github.io/website/posts/test-chartjs/"},{"content":"Alice-\u0026gt;Bob: Hello Bob, how are you? Note right of Bob: Bob thinks Bob--\u0026gt;Alice: I am good thanks! Title: Here is a title A-\u0026gt;B: Normal line B--\u0026gt;C: Dashed line C-\u0026gt;\u0026gt;D: Open arrow D--\u0026gt;\u0026gt;A: Dashed open arrow ","description":"Generates UML sequence diagrams from simple text","id":9,"section":"posts","tags":[""],"title":"JS Sequence Diagram support","uri":"https://aurumnpegasus.github.io/website/posts/test-js-sequence-diagrams/"},{"content":"graph TD; A--\u0026gt;B; A--\u0026gt;C; B--\u0026gt;D; C--\u0026gt;D; sequenceDiagram participant Alice participant Bob Alice-\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts \u0026lt;br/\u0026gt;prevail... John--\u0026gt;Alice: Great! John-\u0026gt;Bob: How about you? Bob--\u0026gt;John: Jolly good! graph TD A[Hard] --\u0026gt;|Text| B(Round) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result 1] C --\u0026gt;|Two| E[Result 2] gantt section Section Completed :done, des1, 2014-01-06,2014-01-08 Active :active, des2, 2014-01-07, 3d Parallel 1 : des3, after des1, 1d Parallel 2 : des4, after des1, 1d Parallel 3 : des5, after des3, 1d Parallel 4 : des6, after des4, 1d classDiagram Class01 \u0026lt;|-- AveryLongClass : Cool \u0026lt;\u0026lt;interface\u0026gt;\u0026gt; Class01 Class09 --\u0026gt; C2 : Where am i? Class09 --* C3 Class09 --|\u0026gt; Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla class Class10 { \u0026lt;\u0026lt;service\u0026gt;\u0026gt; int id size() } stateDiagram [*] --\u0026gt; Still Still --\u0026gt; [*] Still --\u0026gt; Moving Moving --\u0026gt; Still Moving --\u0026gt; Crash Crash --\u0026gt; [*] pie \u0026quot;Dogs\u0026quot; : 386 \u0026quot;Cats\u0026quot; : 85 \u0026quot;Rats\u0026quot; : 15 ","description":"Generate diagrams, charts, graphs or flows from markdown-like text via javascript.","id":10,"section":"posts","tags":["diagram"],"title":"Mermaid support","uri":"https://aurumnpegasus.github.io/website/posts/test-mermaid/"},{"content":"When $a \\ne 0$, there are two solutions to $(ax^2 + bx + c = 0)$ and they are\n$$x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}.$$\n","description":"A JavaScript display engine for mathematics that works in all browsers.No more setup for readers. It just works.","id":11,"section":"posts","tags":[""],"title":"MathJax support","uri":"https://aurumnpegasus.github.io/website/posts/test-mathjax/"},{"content":"The following\n$$ \\int_{a}^{b} x^2 dx $$\nIs an integral\n$$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\nEnable Katex in the config file by setting the katex param to true. This will import the necessary Katex CSS/JS.\nSee the online reference of supported TeX functions.\nNote: For inline math to render correctly, your content file extension must be .mmark. See the official mmark site.\nInline math: $ \\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887‚Ä¶ $ Inline math: $ \\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887‚Ä¶ $\nBlock math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$ Block math:\n$$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n","description":"KaTeX is a fast, easy-to-use JavaScript library for TeX math rendering on the web.","id":12,"section":"posts","tags":[""],"title":"Katex support","uri":"https://aurumnpegasus.github.io/website/posts/test-katex/"},{"content":"st=\u0026gt;start: Start|past:\u0026gt;http://www.google.com[blank] e=\u0026gt;end: End|future:\u0026gt;http://www.google.com op1=\u0026gt;operation: My Operation|past op2=\u0026gt;operation: Stuff|current sub1=\u0026gt;subroutine: My Subroutine|invalid cond=\u0026gt;condition: Yes or No?|approved:\u0026gt;http://www.google.com c2=\u0026gt;condition: Good idea|rejected io=\u0026gt;inputoutput: catch something...|future st-\u0026gt;op1(right)-\u0026gt;cond cond(yes, right)-\u0026gt;c2 cond(no)-\u0026gt;sub1(left)-\u0026gt;op1 c2(yes)-\u0026gt;io-\u0026gt;e c2(no)-\u0026gt;op2-\u0026gt;e ","description":"flowchart.js is a flowchart DSL and SVG render that runs in the browser and terminal. Nodes and connections are defined in separately so that nodes can be reused and connections can be quickly changed.","id":13,"section":"posts","tags":[""],"title":"Flowchart support","uri":"https://aurumnpegasus.github.io/website/posts/test-flowchart/"},{"content":"Hey, I am Shivansh. I like learning stuff, and I like teaching as well. So, I decided to make this blog, where I will write tutorials about stuff I learn and do. Hopefully, it might end up helping someone one day. The blogs up here will not be restricted to what I study (which varies a lot). It will have posts about literally anything I feel like writing, though I will try to write them professionally.\nFeel free to connect with me on any of the socials provided (ideally via mail üòõ) for feedback or discussion about any topic.\n","description":"Hey, Welcome to my blog","id":14,"section":"","tags":null,"title":"About","uri":"https://aurumnpegasus.github.io/website/about/"}]